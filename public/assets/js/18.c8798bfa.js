(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{243:function(t,i,e){t.exports=e.p+"assets/img/git-process.96f3b65c.png"},244:function(t,i,e){t.exports=e.p+"assets/img/git.899c6823.jpg"},333:function(t,i,e){"use strict";e.r(i);var v=e(0),_=Object(v.a)({},(function(){var t=this,i=t.$createElement,v=t._self._c||i;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"git-介绍"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-介绍","aria-hidden":"true"}},[t._v("#")]),t._v(" Git 介绍")]),t._v(" "),v("p",[t._v("Git 是目前世界上最先进的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。")]),t._v(" "),v("h2",{attrs:{id:"git-和-svn-区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-和-svn-区别","aria-hidden":"true"}},[t._v("#")]),t._v(" Git 和 SVN 区别")]),t._v(" "),v("ol",[v("li",[t._v("Git 是分布式的，SVN 不是：这是 Git 和其它非分布式的版本控制系统，例如 SVN，CVS 等，最核心的区别。")]),t._v(" "),v("li",[t._v("Git 把内容按元数据方式存储，而 SVN 是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似 .svn、.cvs 等的文件夹里。")]),t._v(" "),v("li",[t._v("Git 分支和 SVN 的分支不同：分支在 SVN 中一点都不特别，其实它就是版本库中的另外一个目录。")]),t._v(" "),v("li",[t._v("Git 没有一个全局的版本号，而 SVN 有：目前为止这是跟 SVN 相比 Git 缺少的最大的一个特征。")]),t._v(" "),v("li",[t._v("Git 的内容完整性要优于 SVN：Git 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。")])]),t._v(" "),v("h2",{attrs:{id:"git-安装"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-安装","aria-hidden":"true"}},[t._v("#")]),t._v(" Git 安装")]),t._v(" "),v("p",[t._v("在 Windows 平台上安装 Git ，有个叫做 msysGit 的项目提供了安装包，可以到 GitHub 的页面上下载 exe 安装文件并运行：")]),t._v(" "),v("p",[t._v("安装包下载"),v("a",{attrs:{href:"https://gitforwindows.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("地址"),v("OutboundLink")],1)]),t._v(" "),v("p",[t._v("安装完成后，在命令行输入：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v('$ git config --global user.name "Your Name"\n$ git config --global user.email "email@example.com"\n')])])]),v("p",[t._v("因为 Git 是分布式版本控制系统，所以，每个机器都必须自报家门：名字和Email地址")]),t._v(" "),v("blockquote",[v("p",[t._v("--global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。")])]),t._v(" "),v("p",[t._v("可以直接通过查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("$ git config user.name\nYour Name\n")])])]),v("h2",{attrs:{id:"git-工作流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-工作流程","aria-hidden":"true"}},[t._v("#")]),t._v(" Git 工作流程")]),t._v(" "),v("p",[t._v("一般工作流程如下：")]),t._v(" "),v("ul",[v("li",[t._v("克隆 Git 资源作为工作目录")]),t._v(" "),v("li",[t._v("在克隆的资源上添加或修改元素")]),t._v(" "),v("li",[t._v("如果其他人修改了，你可以更新资源")]),t._v(" "),v("li",[t._v("在提交前查看修改")]),t._v(" "),v("li",[t._v("提交修改")]),t._v(" "),v("li",[t._v("在修改完成后，如果发现错误，可以撤回提交并再次修改并提交")])]),t._v(" "),v("p",[t._v("下图展示了 Git 的工作流程：")]),t._v(" "),v("p",[v("img",{attrs:{src:e(243),alt:"Git 工作流程"}})]),t._v(" "),v("h2",{attrs:{id:"git-工作区、暂存区和版本库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-工作区、暂存区和版本库","aria-hidden":"true"}},[t._v("#")]),t._v(" Git 工作区、暂存区和版本库")]),t._v(" "),v("p",[t._v("来理解下Git 工作区、暂存区和版本库概念：")]),t._v(" "),v("ul",[v("li",[t._v("工作区：就是在电脑里能看到的目录。")]),t._v(" "),v("li",[t._v('暂存区：英文叫 stage， 或 index。一般存放在 ".git目录下" 下的 index 文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。')]),t._v(" "),v("li",[t._v("版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。")])]),t._v(" "),v("p",[v("img",{attrs:{src:e(244),alt:"Git 工作区、暂存区和版本库"}})]),t._v(" "),v("p",[t._v('图中左侧为工作区，右侧为版本库。在版本库中标记为 "index" 的区域是暂存区（stage, index），标记为 "master" 的是 master 分支所代表的目录树。')]),t._v(" "),v("blockquote",[v("p",[t._v('图中我们可以看出此时 "HEAD" 实际是指向 master 分支的一个 '),v("strong",[t._v('"游标"')]),t._v("。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。")])]),t._v(" "),v("p",[t._v("图中的 objects 标识的区域为 Git 的"),v("strong",[t._v("对象库")]),t._v('，实际位于 ".git/objects" 目录下，里面包含了创建的各种对象及内容。')]),t._v(" "),v("p",[t._v("当对工作区修改（或新增）的文件执行 "),v("code",[t._v("git add")]),t._v(" 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。")]),t._v(" "),v("p",[t._v("当执行提交操作 "),v("code",[t._v("git commit")]),t._v(" 时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。")]),t._v(" "),v("p",[t._v("当执行 "),v("code",[t._v("git reset HEAD")]),t._v(" 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。")]),t._v(" "),v("p",[t._v("当执行 "),v("code",[t._v("git rm --cached <file>")]),t._v(" 命令时，会直接从暂存区删除文件，工作区则不做出改变。")]),t._v(" "),v("p",[t._v("当执行 "),v("code",[t._v("git checkout .")]),t._v(" 或者 "),v("code",[t._v("git checkout -- <file>")]),t._v(" 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。")]),t._v(" "),v("p",[t._v("当执行 "),v("code",[t._v("git checkout HEAD .")]),t._v(" 或者 "),v("code",[t._v("git checkout HEAD <file>")]),t._v(" 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。")])])}),[],!1,null,null,null);i.default=_.exports}}]);