(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{242:function(t,a,n){t.exports=n.p+"assets/img/git-instruct.b2ea4f42.jpg"},332:function(t,a,n){"use strict";n.r(a);var e=n(0),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git-指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-指令","aria-hidden":"true"}},[t._v("#")]),t._v(" Git 指令")]),t._v(" "),e("p",[e("img",{attrs:{src:n(242),alt:"Git 指令"}})]),t._v(" "),e("h2",{attrs:{id:"创建版本库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建版本库","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建版本库")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# --- git clone ---\n\n# 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下\n$ git clone <远程仓库的网址>\n\n# 指定本地仓库的目录\n$ git clone <远程仓库的网址> <本地目录>\n\n# -b 指定要克隆的分支，默认是master分支\n$ git clone <远程仓库的网址> -b <分支名称> <本地目录>\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# --- git init ---\n\n# 初始化本地仓库，在当前目录下生成 .git 文件夹\n$ git init\n")])])]),e("h2",{attrs:{id:"修改和提交"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改和提交","aria-hidden":"true"}},[t._v("#")]),t._v(" 修改和提交")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# --- git status ---\n\n# 查看本地仓库的状态\n$ git status\n\n# 以简短模式查看本地仓库的状态\n# 会显示两列，第一列是文件的状态，第二列是对应的文件\n# 文件状态：A 新增，M 修改，D 删除，?? 未添加到Git中\n$ git status -s\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# --- git diff ---\n\n# 比较当前文件和暂存区中文件的差异，显示没有暂存起来的更改\n$ git diff\n\n# 比较暂存区中的文件和上次提交时的差异\n$ git diff --cached\n$ git diff --staged\n\n# 比较当前文件和上次提交时的差异\n$ git diff HEAD\n\n# 查看从指定的版本之后改动的内容\n$ git diff <commit ID>\n\n# 比较两个分支之间的差异\n$ git diff <分支名称> <分支名称>\n\n# 查看两个分支分开后各自的改动内容\n$ git diff <分支名称>...<分支名称>\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# --- git add ---\n\n# 添加所有修改、已删除、新增的文件到暂存区中\n$ git add .\n\n# 把指定的文件添加到暂存区中\n$ git add <文件路径>\n\n# 添加所有修改、已删除的文件到暂存区中\n$ git add -u [<文件路径>]\n$ git add --update [<文件路径>]\n\n# 添加所有修改、已删除、新增的文件到暂存区中，省略 <文件路径> 即为当前目录\n$ git add -A [<文件路径>]\n$ git add --all [<文件路径>]\n\n# 查看所有修改、已删除但没有提交的文件，进入一个子命令系统\n$ git add -i [<文件路径>]\n$ git add --interactive [<文件路径>]\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# --- git mv ---\n\n# 重命名指定的文件或者文件夹\n# <源文件/文件夹> => <目标文件/文件夹>\n$ git mv <源文件/文件夹> <目标文件/文件夹>\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# --- git rm ---\n\n# 移除跟踪指定的文件，并从本地仓库的文件夹中删除\n$ git rm <文件路径>\n\n# 移除跟踪指定的文件夹，并从本地仓库的文件夹中删除\n$ git rm -r <文件夹路径>\n\n# 移除跟踪指定的文件，在本地仓库的文件夹中保留该文件\n$ git rm --cached\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('#--- git commit ---\n\n# 把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息\n$ git commit\n\n# 把暂存区中的文件提交到本地仓库中并添加描述信息\n$ git commit -m "<提交的描述信息>"\n\n# 把所有修改、已删除的文件提交到本地仓库中\n# 不包括未被版本库跟踪的文件，等同于先调用了 "git add -u"\n$ git commit -a -m "<提交的描述信息>"\n\n# 修改上次提交的描述信息\n$ git commit --amend\n')])])]),e("h2",{attrs:{id:"查看提交历史"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看提交历史","aria-hidden":"true"}},[t._v("#")]),t._v(" 查看提交历史")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# --- git log ---\n\n# 打印所有的提交记录\n$ git log\n\n# 打印从第一次提交到指定的提交的记录\n$ git log <commit ID>\n\n# 打印指定数量的最新提交的记录\n$ git log -<指定的数量> \n")])])]),e("h2",{attrs:{id:"撤销"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#撤销","aria-hidden":"true"}},[t._v("#")]),t._v(" 撤销")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# --- git reset ---\n\n# 将 HEAD 的指向改变，撤销到指定的提交记录，文件也修改了\n$ git reset --hard <commit ID>\n\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# --- git revert ---\n\n# 生成一个新的提交来撤销某次提交，此次提交之前的所有提交都会被保留。\n$ git revert <commit ID>\n")])])]),e("h2",{attrs:{id:"分支与标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支与标签","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支与标签")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('# --- git branch ---\n\n# 列出本地的所有分支，当前所在分支以 "*" 标出\n$ git branch\n\n# 列出本地的所有分支并显示最后一次提交，当前所在分支以 "*" 标出\n$ git branch -v\n\n# 创建新分支，新的分支基于上一次提交建立\n$ git branch <分支名>\n\n# 修改分支名称\n# 如果不指定原分支名称则为当前所在分支\n$ git branch -m [<原分支名称>] <新的分支名称>\n# 强制修改分支名称\n$ git branch -M [<原分支名称>] <新的分支名称>\n\n# 删除指定的本地分支\n$ git branch -d <分支名称>\n\n# 强制删除指定的本地分支\n$ git branch -D <分支名称>\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('# --- git checkout ---\n\n# 切换到已存在的指定分支\n$ git checkout <分支名称>\n\n# 创建并切换到指定的分支，保留所有的提交记录\n# 等同于 "git branch" 和 "git checkout" 两个命令合并\n$ git checkout -b <分支名称>\n\n# 创建并切换到指定的分支，删除所有的提交记录\n$ git checkout --orphan <分支名称>\n\n# 替换掉本地的改动，新增的文件和已经添加到暂存区的内容不受影响\n$ git checkout <文件路径>\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# --- git tag ---\n\n# 打印所有的标签\n$ git tag\n\n# 添加轻量标签，指向提交对象的引用，可以指定之前的提交记录\n$ git tag <标签名称> [<commit ID>]\n\n# 添加带有描述信息的附注标签，可以指定之前的提交记录\n$ git tag -a <标签名称> -m <标签描述信息> [<commit ID>]\n\n# 切换到指定的标签\n$ git checkout <标签名称>\n\n# 查看标签的信息\n$ git show <标签名称>\n\n# 删除指定的标签\n$ git tag -d <标签名称>\n\n# 将指定的标签提交到远程仓库\n$ git push <远程仓库的别名> <标签名称>\n\n# 将本地所有的标签全部提交到远程仓库\n$ git push <远程仓库的别名> –tags\n")])])]),e("h2",{attrs:{id:"合并与衍合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合并与衍合","aria-hidden":"true"}},[t._v("#")]),t._v(" 合并与衍合")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# --- git merge ---\n\n# 合并指定分支到当前分支\n$ git merge <分支名称>\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# --- git rebase ---\n\n# 衍合指定分支到当前分支\n$ git rebase <分支名称>\n")])])]),e("h2",{attrs:{id:"远程操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远程操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 远程操作")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# --- git remote ---\n\n# 列出已经存在的远程仓库\n$ git remote\n\n# 列出远程仓库的详细信息，在别名后面列出URL地址\n$ git remote -v\n$ git remote --verbose\n\n# 添加远程仓库\n$ git remote add <远程仓库的别名> <远程仓库的URL地址>\n\n# 修改远程仓库的别名\n$ git remote rename <原远程仓库的别名> <新的别名>\n\n# 删除指定名称的远程仓库\n$ git remote remove <远程仓库的别名>\n\n# 修改远程仓库的 URL 地址\n$ git remote set-url <远程仓库的别名> <新的远程仓库URL地址>\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# --- git fetch ---\n\n# 将远程仓库所有分支的最新版本全部取回到本地\n$ git fetch <远程仓库的别名>\n\n# 将远程仓库指定分支的最新版本取回到本地\n$ git fetch <远程主机名> <分支名>\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# --- git pull ---\n\n# 从远程仓库获取最新版本。\n$ git pull\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# --- git push ---\n\n# 把本地仓库的分支推送到远程仓库的指定分支\n$ git push <远程仓库的别名> <本地分支名>:<远程分支名>\n\n# 删除指定的远程仓库的分支\n$ git push <远程仓库的别名> :<远程分支名>\n$ git push <远程仓库的别名> --delete <远程分支名>\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);