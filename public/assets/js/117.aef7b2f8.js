(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{364:function(t,r,e){"use strict";e.r(r);var a=e(0),v=Object(a.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"基本语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本语法","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本语法")]),t._v(" "),e("h2",{attrs:{id:"直接语法："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#直接语法：","aria-hidden":"true"}},[t._v("#")]),t._v(" 直接语法：")]),t._v(" "),e("p",[e("code",[t._v("/pattern/attributes")])]),t._v(" "),e("h2",{attrs:{id:"创建-regexp-对象的语法："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建-regexp-对象的语法：","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建 RegExp 对象的语法：")]),t._v(" "),e("p",[e("code",[t._v("new RegExp(pattern, attributes)")])]),t._v(" "),e("h2",{attrs:{id:"参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参数","aria-hidden":"true"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),e("ul",[e("li",[t._v("参数 pattern 是一个字符串，指定了正则表达式的模式或者其他正则表达式。")]),t._v(" "),e("li",[t._v("参数 attribute 是一个可选的字符串，包含属性 'g'、'i'和'm'，区分大小写的匹配和多行匹配。")])]),t._v(" "),e("h2",{attrs:{id:"抛出"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#抛出","aria-hidden":"true"}},[t._v("#")]),t._v(" 抛出")]),t._v(" "),e("ul",[e("li",[t._v("SyntaxError - 如果 pattern 不是合法的正则表达式，或 attributes 含有 'g'、'i'和'm' 之外的字符，抛出该异常。")])]),t._v(" "),e("h2",{attrs:{id:"regexp对象方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#regexp对象方法","aria-hidden":"true"}},[t._v("#")]),t._v(" RegExp对象方法")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("方法")]),t._v(" "),e("th",[t._v("描述")]),t._v(" "),e("th",[t._v("语法")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("complie")]),t._v(" "),e("td",[t._v("编译正则表达式")]),t._v(" "),e("td",[t._v("--")])]),t._v(" "),e("tr",[e("td",[t._v("exec")]),t._v(" "),e("td",[t._v("检索字符串指定的值。返回找到值，并确定其位置")]),t._v(" "),e("td",[t._v("regex.exec(string)")])]),t._v(" "),e("tr",[e("td",[t._v("test")]),t._v(" "),e("td",[t._v("检索字符串中指定的值。返回 true 或 false")]),t._v(" "),e("td",[t._v("regex.test(string)")])])])]),t._v(" "),e("h2",{attrs:{id:"支付正则表达式-string-的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#支付正则表达式-string-的方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 支付正则表达式 String 的方法")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("方法")]),t._v(" "),e("th",[t._v("描述")]),t._v(" "),e("th",[t._v("语法")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("search")]),t._v(" "),e("td",[t._v("检索与正则表达式相匹配的值")]),t._v(" "),e("td",[t._v("string.search(regex)")])]),t._v(" "),e("tr",[e("td",[t._v("match")]),t._v(" "),e("td",[t._v("找到一个或多个正则表达式的匹配")]),t._v(" "),e("td",[t._v("string.match(regex)")])]),t._v(" "),e("tr",[e("td",[t._v("replace")]),t._v(" "),e("td",[t._v("替换与正则表达式匹配的子串")]),t._v(" "),e("td",[t._v("string.replace(regex, func)")])]),t._v(" "),e("tr",[e("td",[t._v("split")]),t._v(" "),e("td",[t._v("把字符串分割为字符串数组")]),t._v(" "),e("td",[t._v("string.split(regex)")])])])])])}),[],!1,null,null,null);r.default=v.exports}}]);